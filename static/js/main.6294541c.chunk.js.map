{"version":3,"sources":["components/Card.js","components/Cards.js","index.js"],"names":["Card","props","onClick","visible","opened","onCardClick","id","className","Cards","useState","cards","openedCount","i","newCard","Math","random","push","NUMBER_OF_CARDS","cardStatus","setCardStatus","initialCards","useRef","removedCards","setRemovedCards","handleCardClick","position","prevState","map","card","index","length","key","includes","current","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAIaA,G,MAAO,SAACC,GAAD,OAClB,yBACEC,QACED,EAAME,SAAWF,EAAMG,OAAS,kBAAMH,EAAMI,YAAYJ,EAAMK,KAAM,KAEtEC,UAAS,eACPN,EAAME,QAAWF,EAAMG,OAAS,SAAW,WAAc,iBCJlDI,G,MAAQ,WAAO,IAAD,EACWC,oBAAS,WAG3C,IAFA,IAAMC,EAAQ,GACVC,EAAc,EACTC,EAAI,EAAGA,EANI,GAMiBA,IAAK,CACxC,IAAMC,EAAUC,KAAKC,SAAW,GAChCL,EAAMM,KAAKH,GACPA,GACFF,IAMJ,OAHIA,EAAc,IAAM,IACtBD,EAAMO,KAAwBP,EAAMO,KAE/BP,KAdgB,mBAClBQ,EADkB,KACNC,EADM,KAgBnBC,EAAeC,iBAAOH,GAhBH,EAkBeT,mBAAS,IAlBxB,mBAkBlBa,EAlBkB,KAkBJC,EAlBI,KAoBnBC,EAAkB,SAACC,GACnBA,EAAW,GAAKA,EAAWR,GAC7BE,GAAc,SAACO,GAOb,OANsBA,EAAUC,KAAI,SAACC,EAAMC,GACzC,OAAIA,IAAUJ,EAAW,GAAKI,IAAUJ,EAAW,GACzCG,EAEHA,QAIW,IAAbH,EACTN,GAAc,SAACO,GAOb,OANsBA,EAAUC,KAAI,SAACC,EAAMC,GACzC,OAAIA,IAAUJ,EAAW,GACfG,EAEHA,QAIWX,KAAbQ,GACTN,GAAc,SAACO,GAOb,OANsBA,EAAUC,KAAI,SAACC,EAAMC,GACzC,OAAIA,IAAUJ,EAAW,GACfG,EAEHA,QAKbL,GAAgB,SAACG,GAAD,4BAAmBA,GAAnB,CAA8BD,QAQhD,OA9DsB,KA8DfH,EAAaQ,OAClB,8CAEA,oCACE,yBAAKvB,UAAU,aACZW,EAAWS,KAAI,SAACC,EAAMC,GAAP,OACd,kBAAC,EAAD,CACExB,YAAamB,EACbO,IAAKF,EACLvB,GAAIuB,EACJzB,OAAQwB,EACRzB,SAAUmB,EAAaU,SAASH,SAItC,4BAAQ3B,QApBU,WACpBiB,EAAcC,EAAaa,SAC3BV,EAAgB,MAkBd,cC7ENW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.6294541c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.scss';\n\nexport const Card = (props) => (\n  <div\n    onClick={\n      props.visible && props.opened ? () => props.onCardClick(props.id) : null\n    }\n    className={`card ${\n      props.visible ? (props.opened ? 'opened' : 'unopened') : 'invisible'\n    }`}\n  />\n);\n\nCard.propTypes = {\n  id: PropTypes.number,\n  className: PropTypes.string,\n  onCardClick: PropTypes.func,\n  visible: PropTypes.bool,\n};\n","import React, { useState, useRef } from 'react';\nimport { Card } from './Card';\nimport './Cards.scss';\n\nconst NUMBER_OF_CARDS = 12;\n\nexport const Cards = () => {\n  const [cardStatus, setCardStatus] = useState(() => {\n    const cards = [];\n    let openedCount = 0;\n    for (let i = 0; i < NUMBER_OF_CARDS; i++) {\n      const newCard = Math.random() < 0.5;\n      cards.push(newCard);\n      if (newCard) {\n        openedCount++;\n      }\n    }\n    if (openedCount % 2 === 0) {\n      cards[NUMBER_OF_CARDS - 1] = !cards[NUMBER_OF_CARDS - 1];\n    }\n    return cards;\n  });\n  const initialCards = useRef(cardStatus);\n\n  const [removedCards, setRemovedCards] = useState([]);\n\n  const handleCardClick = (position) => {\n    if (position > 0 && position < NUMBER_OF_CARDS - 1) {\n      setCardStatus((prevState) => {\n        const newCardStatus = prevState.map((card, index) => {\n          if (index === position - 1 || index === position + 1) {\n            return !card;\n          }\n          return card;\n        });\n        return newCardStatus;\n      });\n    } else if (position === 0) {\n      setCardStatus((prevState) => {\n        const newCardStatus = prevState.map((card, index) => {\n          if (index === position + 1) {\n            return !card;\n          }\n          return card;\n        });\n        return newCardStatus;\n      });\n    } else if (position === NUMBER_OF_CARDS - 1) {\n      setCardStatus((prevState) => {\n        const newCardStatus = prevState.map((card, index) => {\n          if (index === position - 1) {\n            return !card;\n          }\n          return card;\n        });\n        return newCardStatus;\n      });\n    }\n    setRemovedCards((prevState) => [...prevState, position]);\n  };\n\n  const handleRestart = () => {\n    setCardStatus(initialCards.current);\n    setRemovedCards([]);\n  };\n\n  return removedCards.length === NUMBER_OF_CARDS ? (\n    <div>Done, refresh</div>\n  ) : (\n    <>\n      <div className='container'>\n        {cardStatus.map((card, index) => (\n          <Card\n            onCardClick={handleCardClick}\n            key={index}\n            id={index}\n            opened={card}\n            visible={!removedCards.includes(index)}\n          />\n        ))}\n      </div>\n      <button onClick={handleRestart}>Restart</button>\n    </>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Cards } from './components/Cards';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Cards />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}